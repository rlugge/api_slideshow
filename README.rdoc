This is a 'living slideshow' of code for the purposes of demonstrating various concepts regarding programming an API in Ruby on Rails.  This slideshow is aimed primarily and specifically at an API-only construct but can be used in conjuction with other techniques to build a more fully featured side.  Please check out the commits at various stages to view the various states of the app and the information that should be gleaned from each of them.

===========

OK, we're generating and catching one exception.  But what happens if someone passes an invalid token in?

Well, currently we're exposing that second exception.  We need to fix that, so lets add this rescue lock in:

rescue_from Exception do |exception|
	error={
	  :exception=>exception.message
	}
	render json:error, :status=>500
end

There, now we're catching every possible exception and telling the user what happened, as best we can.

Still, lets fix the exception -- or at least, provide more valid feedback to the user instead of a code error.

Our authentication system has three steps:

1) Check if the user provided a token
2) Validate that token
3) Proceed with request

Lets explicitly Catch that second error by changing authenticate as follows:

  def authenticate!
    authenticate_with_http_token do |token, options|
      session=Session.where(:token=>token).first
      raise Unauthenticated.new unless session
      @current_user=session.user
    end
    raise Unauthenticated.new unless @current_user
  end