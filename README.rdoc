This is a 'living slideshow' of code for the purposes of demonstrating various concepts regarding programming an API in Ruby on Rails.  This slideshow is aimed primarily and specifically at an API-only construct but can be used in conjuction with other techniques to build a more fully featured side.  Please check out the commits at various stages to view the various states of the app and the information that should be gleaned from each of them.

===========

As currently constituted, failed authentication will throw a rather useless error message or -- worse yet -- throw an uncaught exception if you give it an invalid token.

Go open up app/controllers/api/v1/api_controller.rb -- this file is where we're going to be doing most of our work today.  Now, lets improve that error message to make it more readable.  The authenticate! method uses the built-in rails method authenticate_or_request_with_http_token.  If you return a truthy value from it, execution continues.  If you return a falsey value or the authorization token header is missing, it terminates processing and gives us that rather useless error message.

So lets fix this.

First, we're going to replace our call to authenticate_or_request_with_http_token to authenticate_with_http_token.  Doesn't give us the ugly error message anymore... but neither does it return a 401 status code if we don't have a login value.

Add the following class definition to the API controller -- I recommend right at the top, right above protect_from_forgery.

class Unauthenticated < StandardError; end

Now, at the bottom of hte authenticate method, add:

raise Unauthenticated.new unless @current_user

Yay, now we're getting something halfway useful -- we might not know why we're getting the exception, but we know that it's being triggered from outside of the authentication block.  A little digging, and you'll rapidly realize you're never getting into the authentication block...  Because the Authorization: token header is actually supposed to be Authorization: Token.  A capital T is all you needed (along with a valid token, of course).